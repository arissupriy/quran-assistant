// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'quiz_models.freezed.dart';

/// Struct utama untuk parameter filter kuis yang dikirim dari Flutter.
class QuizFilter {
  /// Cakupan ayat yang akan digunakan untuk membuat soal.
  final QuizScope scope;
  final int quizCount;

  const QuizFilter({required this.scope, required this.quizCount});

  @override
  int get hashCode => scope.hashCode ^ quizCount.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QuizFilter &&
          runtimeType == other.runtimeType &&
          scope == other.scope &&
          quizCount == other.quizCount;
}

@freezed
sealed class QuizGenerationError with _$QuizGenerationError {
  const QuizGenerationError._();

  /// Error internal lainnya yang tidak terduga.
  const factory QuizGenerationError.internalError(String field0) =
      QuizGenerationError_InternalError;

  /// Terjadi ketika filter yang diberikan (mis. Juz/Surah) tidak menghasilkan satu pun ayat.
  const factory QuizGenerationError.noVersesInScope() =
      QuizGenerationError_NoVersesInScope;

  /// Terjadi ketika tidak ada ayat yang memenuhi kriteria soal (mis. unik atau cukup panjang)
  /// setelah beberapa kali percobaan.
  const factory QuizGenerationError.noValidQuestionFound() =
      QuizGenerationError_NoValidQuestionFound;

  /// Terjadi ketika teks ayat yang diperlukan untuk soal tidak ditemukan.
  const factory QuizGenerationError.missingAyahText() =
      QuizGenerationError_MissingAyahText;
}

/// Struct yang akan selalu dikembalikan oleh fungsi generator kuis.
/// Berisi salah satu dari `question` (jika sukses) atau `error` (jika gagal).
class QuizGenerationResult {
  /// Berisi pertanyaan kuis jika berhasil dibuat. `None` jika gagal.
  final QuizQuestion? question;

  /// Berisi detail error jika gagal dibuat. `None` jika berhasil.
  final QuizGenerationError? error;

  const QuizGenerationResult({this.question, this.error});

  @override
  int get hashCode => question.hashCode ^ error.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QuizGenerationResult &&
          runtimeType == other.runtimeType &&
          question == other.question &&
          error == other.error;
}

/// Merepresentasikan satu opsi jawaban dalam kuis pilihan ganda.
class QuizOption {
  /// Teks yang akan ditampilkan kepada pengguna untuk opsi ini.
  final String text;

  /// Menandakan apakah ini adalah opsi jawaban yang benar.
  final bool isCorrect;

  const QuizOption({required this.text, required this.isCorrect});

  @override
  int get hashCode => text.hashCode ^ isCorrect.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QuizOption &&
          runtimeType == other.runtimeType &&
          text == other.text &&
          isCorrect == other.isCorrect;
}

/// Struktur utama yang merepresentasikan satu pertanyaan kuis.
/// Dirancang untuk mendukung berbagai jenis kuis secara fleksibel.
class QuizQuestion {
  /// Kunci ayat (`chapter:verse`) yang menjadi sumber utama soal ini.
  final String verseKey;

  /// Bagian pertama dari teks pertanyaan (misalnya, teks ayat sebelum bagian yang dihilangkan).
  final String questionTextPart1;

  /// Bagian kedua dari teks pertanyaan (misalnya, teks setelah bagian yang dihilangkan).
  final String questionTextPart2;

  /// Teks dari jawaban yang benar (misalnya, potongan kata/ayat yang dihilangkan).
  final String missingPartText;

  /// Daftar opsi yang akan ditampilkan.
  /// - Untuk Pilihan Ganda: Berisi teks jawaban (1 benar, sisanya pengecoh).
  /// - Untuk Puzzle: Berisi teks dari item yang diacak (kata atau ayat).
  final List<QuizOption> options;

  /// **Untuk Pilihan Ganda:** Indeks dari `options` yang merupakan jawaban benar.
  final int correctAnswerIndex;

  /// **Untuk Puzzle/Urutan:** Menyimpan urutan indeks yang benar dari `options`.
  /// `None` jika bukan kuis tipe urutan.
  final Uint32List? correctOrderIndices;

  /// String yang mengidentifikasi tipe kuis.
  /// Contoh: "verse_completion", "fragment_completion", "word_puzzle", "verse_puzzle".
  final String quizType;

  /// Hanya untuk tipe puzzle: bagian yang diacak (teks)
  final List<String>? shuffledParts;

  /// Hanya untuk puzzle ayat: urutan `verseKey` dari `shuffled_parts`
  final List<String>? shuffledKeys;

  /// Hanya untuk puzzle ayat: urutan benar `verseKey` yang harus dicapai
  final List<String>? correctOrderKeys;

  const QuizQuestion({
    required this.verseKey,
    required this.questionTextPart1,
    required this.questionTextPart2,
    required this.missingPartText,
    required this.options,
    required this.correctAnswerIndex,
    this.correctOrderIndices,
    required this.quizType,
    this.shuffledParts,
    this.shuffledKeys,
    this.correctOrderKeys,
  });

  @override
  int get hashCode =>
      verseKey.hashCode ^
      questionTextPart1.hashCode ^
      questionTextPart2.hashCode ^
      missingPartText.hashCode ^
      options.hashCode ^
      correctAnswerIndex.hashCode ^
      correctOrderIndices.hashCode ^
      quizType.hashCode ^
      shuffledParts.hashCode ^
      shuffledKeys.hashCode ^
      correctOrderKeys.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QuizQuestion &&
          runtimeType == other.runtimeType &&
          verseKey == other.verseKey &&
          questionTextPart1 == other.questionTextPart1 &&
          questionTextPart2 == other.questionTextPart2 &&
          missingPartText == other.missingPartText &&
          options == other.options &&
          correctAnswerIndex == other.correctAnswerIndex &&
          correctOrderIndices == other.correctOrderIndices &&
          quizType == other.quizType &&
          shuffledParts == other.shuffledParts &&
          shuffledKeys == other.shuffledKeys &&
          correctOrderKeys == other.correctOrderKeys;
}

/// Struct pembungkus jika Anda ingin mengembalikan satu set pertanyaan kuis sekaligus.
class QuizQuestions {
  final List<QuizQuestion> questions;

  const QuizQuestions({required this.questions});

  @override
  int get hashCode => questions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QuizQuestions &&
          runtimeType == other.runtimeType &&
          questions == other.questions;
}

@freezed
sealed class QuizScope with _$QuizScope {
  const QuizScope._();

  /// Menggunakan semua ayat di Al-Qur'an.
  const factory QuizScope.all() = QuizScope_All;

  /// Berdasarkan daftar nomor Juz.
  /// - `juz_numbers: vec![1]` -> Hanya Juz 1.
  /// - `juz_numbers: vec![1, 5]` -> Rentang Juz dari 1 sampai 5.
  const factory QuizScope.byJuz({required Uint32List juzNumbers}) =
      QuizScope_ByJuz;

  /// Berdasarkan satu ID Surah.
  const factory QuizScope.bySurah({required int surahId}) = QuizScope_BySurah;
}
