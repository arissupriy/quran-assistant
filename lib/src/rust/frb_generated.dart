// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/engine_loader.dart';
import 'api/mushaf.dart';
import 'api/quiz/quiz_fragment_completion.dart';
import 'api/quiz/verse_completion.dart';
import 'api/quiz/verse_order.dart';
import 'api/quiz/verse_previous.dart';
import 'api/quran/chapter.dart';
import 'api/quran/metadata.dart';
import 'api/quran/search.dart';
import 'api/quran/similarity.dart';
import 'api/quran/verse.dart';
import 'api/recorder.dart';
import 'api/simple.dart';
import 'api/whisper.dart';
import 'dart:async';
import 'dart:convert';
import 'data_loader/ayah_texts.dart';
import 'data_loader/chapters.dart';
import 'data_loader/juzs.dart';
import 'data_loader/mushaf_page_info.dart';
import 'data_loader/quiz_models.dart';
import 'data_loader/search_models.dart';
import 'data_loader/valid_matching_ayah.dart';
import 'data_loader/verse_by_chapter.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -939638697;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_quran_assistant',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<SharedBuffer> crateApiRecorderSharedBufferDefault();

  Future<List<SearchResult>> crateApiQuranSearchFtsSearch({
    required String query,
  });

  Future<QuizQuestions>
  crateApiQuizQuizFragmentCompletionGenerateBatchFragmentQuizzes({
    required QuizFilter filter,
  });

  Future<QuizQuestions>
  crateApiQuizVerseCompletionGenerateBatchVerseCompletionQuizzes({
    required QuizFilter filter,
  });

  Future<QuizQuestions> crateApiQuizVerseOrderGenerateBatchVerseOrderQuizzes({
    required QuizFilter filter,
  });

  Future<QuizQuestions>
  crateApiQuizVersePreviousGenerateBatchVersePreviousQuizzes({
    required QuizFilter filter,
  });

  Future<QuizGenerationResult>
  crateApiQuizVersePreviousGeneratePreviousVerseQuiz({
    required QuizFilter filter,
  });

  QuizGenerationResult crateApiQuizVerseCompletionGenerateVerseCompletionQuiz({
    required QuizFilter filter,
  });

  QuizGenerationResult
  crateApiQuizQuizFragmentCompletionGenerateVerseFragmentQuiz({
    required QuizFilter filter,
  });

  Future<List<Chapter>> crateApiQuranChapterGetAllChapters();

  Future<List<Juz>> crateApiQuranMetadataGetAllJuzs();

  Future<List<JuzWithPage>> crateApiQuranMetadataGetAllJuzsWithPage();

  Future<List<AyahText>> crateApiQuranChapterGetAyahsBySurah({
    required int chapterId,
  });

  Future<Chapter?> crateApiQuranMetadataGetChapterByPageNumber({
    required int pageNumber,
  });

  Future<Chapter?> crateApiQuranChapterGetChapterDetails({
    required int chapterId,
  });

  Future<String> crateApiQuranChapterGetChapterNameSimple({
    required int chapterId,
  });

  Future<Juz?> crateApiQuranMetadataGetJuzDetails({required int juzNumber});

  Future<int?> crateApiQuranVerseGetJuzNumberForVerse({
    required String verseKey,
  });

  Future<MushafPageInfo> crateApiQuranMetadataGetMushafPageContextInfo({
    required int pageNumber,
  });

  Future<int> crateApiQuranMetadataGetPageFromVerseId({required int verseId});

  Future<Uint8List?> crateApiMushafGetPageImage({required int page});

  Future<List<GlyphPosition>?> crateApiMushafGetPageMetadata({
    required int page,
  });

  Future<List<MatchedAyah>> crateApiQuranSimilarityGetSimilarAyahs({
    required String verseKey,
  });

  Future<List<MatchedAyah>> crateApiQuranSimilarityGetSimilarAyahsInverted({
    required String verseKey,
  });

  Future<String?> crateApiQuranVerseGetTranslationText({
    required String verseKey,
  });

  Future<Verse?> crateApiQuranVerseGetVerseByChapterAndVerseNumber({
    required int chapterNumber,
    required int verseNumber,
  });

  Future<VerseDetailWithWords?> crateApiQuranVerseGetVerseDetails({
    required String verseKey,
  });

  Future<String?> crateApiQuranVerseGetVerseTextUthmani({
    required String verseKey,
  });

  Future<AyahText> crateApiQuranVerseGetVerseTexts({required String verseKey});

  Future<Translation?> crateApiQuranVerseGetWordDetails({
    required String verseKey,
  });

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<QuizGenerationResult>
  crateApiQuizVerseCompletionInnerGenerateVerseCompletionQuiz({
    required QuizFilter filter,
  });

  Future<bool> crateApiWhisperIsWhisperModelLoaded();

  Future<void> crateApiEngineLoaderLoadEngineDataFromFlutterAssets({
    required Map<String, Uint8List> map,
  });

  Future<void> crateApiWhisperLoadWhisperModelFromFlutter({
    required List<int> data,
  });

  Future<bool> crateApiMushafOpenMushafPack({required String path});

  Future<void> crateApiRecorderRecorderInit();

  Future<void> crateApiRecorderRecorderStart({required int sampleRate});

  Future<void> crateApiRecorderRecorderStop();

  Future<Int16List> crateApiRecorderRecorderTakeSamples();

  Future<void> crateApiEngineLoaderResetEngineFromFlutter({
    required Map<String, Uint8List> map,
  });

  Future<String> crateApiWhisperTranscribePcm({
    required List<int> pcmS16Mono,
    required int sampleRate,
  });

  Future<String> crateApiWhisperTranscribeWavBytes({
    required List<int> wavBytes,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SharedBuffer;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SharedBuffer;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SharedBufferPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<SharedBuffer> crateApiRecorderSharedBufferDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSharedBuffer,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRecorderSharedBufferDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRecorderSharedBufferDefaultConstMeta =>
      const TaskConstMeta(debugName: "SharedBuffer_default", argNames: []);

  @override
  Future<List<SearchResult>> crateApiQuranSearchFtsSearch({
    required String query,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(query, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_search_result,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranSearchFtsSearchConstMeta,
        argValues: [query],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranSearchFtsSearchConstMeta =>
      const TaskConstMeta(debugName: "fts_search", argNames: ["query"]);

  @override
  Future<QuizQuestions>
  crateApiQuizQuizFragmentCompletionGenerateBatchFragmentQuizzes({
    required QuizFilter filter,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_quiz_filter(filter, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_quiz_questions,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiQuizQuizFragmentCompletionGenerateBatchFragmentQuizzesConstMeta,
        argValues: [filter],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiQuizQuizFragmentCompletionGenerateBatchFragmentQuizzesConstMeta =>
      const TaskConstMeta(
        debugName: "generate_batch_fragment_quizzes",
        argNames: ["filter"],
      );

  @override
  Future<QuizQuestions>
  crateApiQuizVerseCompletionGenerateBatchVerseCompletionQuizzes({
    required QuizFilter filter,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_quiz_filter(filter, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_quiz_questions,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiQuizVerseCompletionGenerateBatchVerseCompletionQuizzesConstMeta,
        argValues: [filter],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiQuizVerseCompletionGenerateBatchVerseCompletionQuizzesConstMeta =>
      const TaskConstMeta(
        debugName: "generate_batch_verse_completion_quizzes",
        argNames: ["filter"],
      );

  @override
  Future<QuizQuestions> crateApiQuizVerseOrderGenerateBatchVerseOrderQuizzes({
    required QuizFilter filter,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_quiz_filter(filter, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_quiz_questions,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiQuizVerseOrderGenerateBatchVerseOrderQuizzesConstMeta,
        argValues: [filter],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiQuizVerseOrderGenerateBatchVerseOrderQuizzesConstMeta =>
      const TaskConstMeta(
        debugName: "generate_batch_verse_order_quizzes",
        argNames: ["filter"],
      );

  @override
  Future<QuizQuestions>
  crateApiQuizVersePreviousGenerateBatchVersePreviousQuizzes({
    required QuizFilter filter,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_quiz_filter(filter, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_quiz_questions,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiQuizVersePreviousGenerateBatchVersePreviousQuizzesConstMeta,
        argValues: [filter],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiQuizVersePreviousGenerateBatchVersePreviousQuizzesConstMeta =>
      const TaskConstMeta(
        debugName: "generate_batch_verse_previous_quizzes",
        argNames: ["filter"],
      );

  @override
  Future<QuizGenerationResult>
  crateApiQuizVersePreviousGeneratePreviousVerseQuiz({
    required QuizFilter filter,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_quiz_filter(filter, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_quiz_generation_result,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuizVersePreviousGeneratePreviousVerseQuizConstMeta,
        argValues: [filter],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiQuizVersePreviousGeneratePreviousVerseQuizConstMeta =>
      const TaskConstMeta(
        debugName: "generate_previous_verse_quiz",
        argNames: ["filter"],
      );

  @override
  QuizGenerationResult crateApiQuizVerseCompletionGenerateVerseCompletionQuiz({
    required QuizFilter filter,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_quiz_filter(filter, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_quiz_generation_result,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiQuizVerseCompletionGenerateVerseCompletionQuizConstMeta,
        argValues: [filter],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiQuizVerseCompletionGenerateVerseCompletionQuizConstMeta =>
      const TaskConstMeta(
        debugName: "generate_verse_completion_quiz",
        argNames: ["filter"],
      );

  @override
  QuizGenerationResult
  crateApiQuizQuizFragmentCompletionGenerateVerseFragmentQuiz({
    required QuizFilter filter,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_quiz_filter(filter, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_quiz_generation_result,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiQuizQuizFragmentCompletionGenerateVerseFragmentQuizConstMeta,
        argValues: [filter],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiQuizQuizFragmentCompletionGenerateVerseFragmentQuizConstMeta =>
      const TaskConstMeta(
        debugName: "generate_verse_fragment_quiz",
        argNames: ["filter"],
      );

  @override
  Future<List<Chapter>> crateApiQuranChapterGetAllChapters() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_chapter,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranChapterGetAllChaptersConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranChapterGetAllChaptersConstMeta =>
      const TaskConstMeta(debugName: "get_all_chapters", argNames: []);

  @override
  Future<List<Juz>> crateApiQuranMetadataGetAllJuzs() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_juz,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranMetadataGetAllJuzsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranMetadataGetAllJuzsConstMeta =>
      const TaskConstMeta(debugName: "get_all_juzs", argNames: []);

  @override
  Future<List<JuzWithPage>> crateApiQuranMetadataGetAllJuzsWithPage() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_juz_with_page,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranMetadataGetAllJuzsWithPageConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranMetadataGetAllJuzsWithPageConstMeta =>
      const TaskConstMeta(debugName: "get_all_juzs_with_page", argNames: []);

  @override
  Future<List<AyahText>> crateApiQuranChapterGetAyahsBySurah({
    required int chapterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(chapterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_ayah_text,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranChapterGetAyahsBySurahConstMeta,
        argValues: [chapterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranChapterGetAyahsBySurahConstMeta =>
      const TaskConstMeta(
        debugName: "get_ayahs_by_surah",
        argNames: ["chapterId"],
      );

  @override
  Future<Chapter?> crateApiQuranMetadataGetChapterByPageNumber({
    required int pageNumber,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(pageNumber, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_chapter,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranMetadataGetChapterByPageNumberConstMeta,
        argValues: [pageNumber],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranMetadataGetChapterByPageNumberConstMeta =>
      const TaskConstMeta(
        debugName: "get_chapter_by_page_number",
        argNames: ["pageNumber"],
      );

  @override
  Future<Chapter?> crateApiQuranChapterGetChapterDetails({
    required int chapterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(chapterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_chapter,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranChapterGetChapterDetailsConstMeta,
        argValues: [chapterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranChapterGetChapterDetailsConstMeta =>
      const TaskConstMeta(
        debugName: "get_chapter_details",
        argNames: ["chapterId"],
      );

  @override
  Future<String> crateApiQuranChapterGetChapterNameSimple({
    required int chapterId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(chapterId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranChapterGetChapterNameSimpleConstMeta,
        argValues: [chapterId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranChapterGetChapterNameSimpleConstMeta =>
      const TaskConstMeta(
        debugName: "get_chapter_name_simple",
        argNames: ["chapterId"],
      );

  @override
  Future<Juz?> crateApiQuranMetadataGetJuzDetails({required int juzNumber}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(juzNumber, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_juz,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranMetadataGetJuzDetailsConstMeta,
        argValues: [juzNumber],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranMetadataGetJuzDetailsConstMeta =>
      const TaskConstMeta(
        debugName: "get_juz_details",
        argNames: ["juzNumber"],
      );

  @override
  Future<int?> crateApiQuranVerseGetJuzNumberForVerse({
    required String verseKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(verseKey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranVerseGetJuzNumberForVerseConstMeta,
        argValues: [verseKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranVerseGetJuzNumberForVerseConstMeta =>
      const TaskConstMeta(
        debugName: "get_juz_number_for_verse",
        argNames: ["verseKey"],
      );

  @override
  Future<MushafPageInfo> crateApiQuranMetadataGetMushafPageContextInfo({
    required int pageNumber,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_i_32(pageNumber, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_mushaf_page_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiQuranMetadataGetMushafPageContextInfoConstMeta,
        argValues: [pageNumber],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranMetadataGetMushafPageContextInfoConstMeta =>
      const TaskConstMeta(
        debugName: "get_mushaf_page_context_info",
        argNames: ["pageNumber"],
      );

  @override
  Future<int> crateApiQuranMetadataGetPageFromVerseId({required int verseId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(verseId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranMetadataGetPageFromVerseIdConstMeta,
        argValues: [verseId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranMetadataGetPageFromVerseIdConstMeta =>
      const TaskConstMeta(
        debugName: "get_page_from_verse_id",
        argNames: ["verseId"],
      );

  @override
  Future<Uint8List?> crateApiMushafGetPageImage({required int page}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_16(page, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMushafGetPageImageConstMeta,
        argValues: [page],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMushafGetPageImageConstMeta =>
      const TaskConstMeta(debugName: "get_page_image", argNames: ["page"]);

  @override
  Future<List<GlyphPosition>?> crateApiMushafGetPageMetadata({
    required int page,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_16(page, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_list_glyph_position,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMushafGetPageMetadataConstMeta,
        argValues: [page],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMushafGetPageMetadataConstMeta =>
      const TaskConstMeta(debugName: "get_page_metadata", argNames: ["page"]);

  @override
  Future<List<MatchedAyah>> crateApiQuranSimilarityGetSimilarAyahs({
    required String verseKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(verseKey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_matched_ayah,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranSimilarityGetSimilarAyahsConstMeta,
        argValues: [verseKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranSimilarityGetSimilarAyahsConstMeta =>
      const TaskConstMeta(
        debugName: "get_similar_ayahs",
        argNames: ["verseKey"],
      );

  @override
  Future<List<MatchedAyah>> crateApiQuranSimilarityGetSimilarAyahsInverted({
    required String verseKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(verseKey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_matched_ayah,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranSimilarityGetSimilarAyahsInvertedConstMeta,
        argValues: [verseKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranSimilarityGetSimilarAyahsInvertedConstMeta =>
      const TaskConstMeta(
        debugName: "get_similar_ayahs_inverted",
        argNames: ["verseKey"],
      );

  @override
  Future<String?> crateApiQuranVerseGetTranslationText({
    required String verseKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(verseKey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranVerseGetTranslationTextConstMeta,
        argValues: [verseKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranVerseGetTranslationTextConstMeta =>
      const TaskConstMeta(
        debugName: "get_translation_text",
        argNames: ["verseKey"],
      );

  @override
  Future<Verse?> crateApiQuranVerseGetVerseByChapterAndVerseNumber({
    required int chapterNumber,
    required int verseNumber,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_32(chapterNumber, serializer);
          sse_encode_u_32(verseNumber, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_verse,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranVerseGetVerseByChapterAndVerseNumberConstMeta,
        argValues: [chapterNumber, verseNumber],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiQuranVerseGetVerseByChapterAndVerseNumberConstMeta =>
      const TaskConstMeta(
        debugName: "get_verse_by_chapter_and_verse_number",
        argNames: ["chapterNumber", "verseNumber"],
      );

  @override
  Future<VerseDetailWithWords?> crateApiQuranVerseGetVerseDetails({
    required String verseKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(verseKey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_verse_detail_with_words,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranVerseGetVerseDetailsConstMeta,
        argValues: [verseKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranVerseGetVerseDetailsConstMeta =>
      const TaskConstMeta(
        debugName: "get_verse_details",
        argNames: ["verseKey"],
      );

  @override
  Future<String?> crateApiQuranVerseGetVerseTextUthmani({
    required String verseKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(verseKey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranVerseGetVerseTextUthmaniConstMeta,
        argValues: [verseKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranVerseGetVerseTextUthmaniConstMeta =>
      const TaskConstMeta(
        debugName: "get_verse_text_uthmani",
        argNames: ["verseKey"],
      );

  @override
  Future<AyahText> crateApiQuranVerseGetVerseTexts({required String verseKey}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(verseKey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_ayah_text,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranVerseGetVerseTextsConstMeta,
        argValues: [verseKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranVerseGetVerseTextsConstMeta =>
      const TaskConstMeta(debugName: "get_verse_texts", argNames: ["verseKey"]);

  @override
  Future<Translation?> crateApiQuranVerseGetWordDetails({
    required String verseKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(verseKey, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_translation,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiQuranVerseGetWordDetailsConstMeta,
        argValues: [verseKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiQuranVerseGetWordDetailsConstMeta =>
      const TaskConstMeta(
        debugName: "get_word_details",
        argNames: ["verseKey"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<QuizGenerationResult>
  crateApiQuizVerseCompletionInnerGenerateVerseCompletionQuiz({
    required QuizFilter filter,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_quiz_filter(filter, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_quiz_generation_result,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiQuizVerseCompletionInnerGenerateVerseCompletionQuizConstMeta,
        argValues: [filter],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiQuizVerseCompletionInnerGenerateVerseCompletionQuizConstMeta =>
      const TaskConstMeta(
        debugName: "inner_generate_verse_completion_quiz",
        argNames: ["filter"],
      );

  @override
  Future<bool> crateApiWhisperIsWhisperModelLoaded() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiWhisperIsWhisperModelLoadedConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWhisperIsWhisperModelLoadedConstMeta =>
      const TaskConstMeta(debugName: "is_whisper_model_loaded", argNames: []);

  @override
  Future<void> crateApiEngineLoaderLoadEngineDataFromFlutterAssets({
    required Map<String, Uint8List> map,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Map_String_list_prim_u_8_strict_None(map, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta:
            kCrateApiEngineLoaderLoadEngineDataFromFlutterAssetsConstMeta,
        argValues: [map],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiEngineLoaderLoadEngineDataFromFlutterAssetsConstMeta =>
      const TaskConstMeta(
        debugName: "load_engine_data_from_flutter_assets",
        argNames: ["map"],
      );

  @override
  Future<void> crateApiWhisperLoadWhisperModelFromFlutter({
    required List<int> data,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(data, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiWhisperLoadWhisperModelFromFlutterConstMeta,
        argValues: [data],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWhisperLoadWhisperModelFromFlutterConstMeta =>
      const TaskConstMeta(
        debugName: "load_whisper_model_from_flutter",
        argNames: ["data"],
      );

  @override
  Future<bool> crateApiMushafOpenMushafPack({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiMushafOpenMushafPackConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMushafOpenMushafPackConstMeta =>
      const TaskConstMeta(debugName: "open_mushaf_pack", argNames: ["path"]);

  @override
  Future<void> crateApiRecorderRecorderInit() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRecorderRecorderInitConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRecorderRecorderInitConstMeta =>
      const TaskConstMeta(debugName: "recorder_init", argNames: []);

  @override
  Future<void> crateApiRecorderRecorderStart({required int sampleRate}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_i_32(sampleRate, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiRecorderRecorderStartConstMeta,
        argValues: [sampleRate],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRecorderRecorderStartConstMeta =>
      const TaskConstMeta(
        debugName: "recorder_start",
        argNames: ["sampleRate"],
      );

  @override
  Future<void> crateApiRecorderRecorderStop() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRecorderRecorderStopConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRecorderRecorderStopConstMeta =>
      const TaskConstMeta(debugName: "recorder_stop", argNames: []);

  @override
  Future<Int16List> crateApiRecorderRecorderTakeSamples() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_i_16_strict,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiRecorderRecorderTakeSamplesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiRecorderRecorderTakeSamplesConstMeta =>
      const TaskConstMeta(debugName: "recorder_take_samples", argNames: []);

  @override
  Future<void> crateApiEngineLoaderResetEngineFromFlutter({
    required Map<String, Uint8List> map,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Map_String_list_prim_u_8_strict_None(map, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiEngineLoaderResetEngineFromFlutterConstMeta,
        argValues: [map],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiEngineLoaderResetEngineFromFlutterConstMeta =>
      const TaskConstMeta(
        debugName: "reset_engine_from_flutter",
        argNames: ["map"],
      );

  @override
  Future<String> crateApiWhisperTranscribePcm({
    required List<int> pcmS16Mono,
    required int sampleRate,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_i_16_loose(pcmS16Mono, serializer);
          sse_encode_i_32(sampleRate, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiWhisperTranscribePcmConstMeta,
        argValues: [pcmS16Mono, sampleRate],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWhisperTranscribePcmConstMeta =>
      const TaskConstMeta(
        debugName: "transcribe_pcm",
        argNames: ["pcmS16Mono", "sampleRate"],
      );

  @override
  Future<String> crateApiWhisperTranscribeWavBytes({
    required List<int> wavBytes,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(wavBytes, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiWhisperTranscribeWavBytesConstMeta,
        argValues: [wavBytes],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiWhisperTranscribeWavBytesConstMeta =>
      const TaskConstMeta(
        debugName: "transcribe_wav_bytes",
        argNames: ["wavBytes"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SharedBuffer => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSharedBuffer;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SharedBuffer => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSharedBuffer;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  SharedBuffer
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSharedBuffer(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SharedBufferImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_string(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  Map<String, Uint8List> dco_decode_Map_String_list_prim_u_8_strict_None(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_list_prim_u_8_strict(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  SharedBuffer
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSharedBuffer(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SharedBufferImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AyahText dco_decode_ayah_text(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return AyahText(
      verseKey: dco_decode_String(arr[0]),
      textUthmaniSimple: dco_decode_String(arr[1]),
      textUthmani: dco_decode_String(arr[2]),
      textQpcHafs: dco_decode_String(arr[3]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Chapter dco_decode_box_autoadd_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_chapter(raw);
  }

  @protected
  Juz dco_decode_box_autoadd_juz(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_juz(raw);
  }

  @protected
  QuizFilter dco_decode_box_autoadd_quiz_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_quiz_filter(raw);
  }

  @protected
  QuizGenerationError dco_decode_box_autoadd_quiz_generation_error(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_quiz_generation_error(raw);
  }

  @protected
  QuizQuestion dco_decode_box_autoadd_quiz_question(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_quiz_question(raw);
  }

  @protected
  Translation dco_decode_box_autoadd_translation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_translation(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Verse dco_decode_box_autoadd_verse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_verse(raw);
  }

  @protected
  VerseDetailWithWords dco_decode_box_autoadd_verse_detail_with_words(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_verse_detail_with_words(raw);
  }

  @protected
  Chapter dco_decode_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return Chapter(
      id: dco_decode_u_32(arr[0]),
      revelationPlace: dco_decode_String(arr[1]),
      revelationOrder: dco_decode_u_32(arr[2]),
      bismillahPre: dco_decode_bool(arr[3]),
      nameSimple: dco_decode_String(arr[4]),
      nameComplex: dco_decode_String(arr[5]),
      nameArabic: dco_decode_String(arr[6]),
      versesCount: dco_decode_u_32(arr[7]),
      pages: dco_decode_list_prim_u_32_strict(arr[8]),
      translatedName: dco_decode_translated_name(arr[9]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  GlyphPosition dco_decode_glyph_position(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return GlyphPosition(
      glyphId: dco_decode_u_32(arr[0]),
      pageNumber: dco_decode_u_16(arr[1]),
      lineNumber: dco_decode_u_8(arr[2]),
      sura: dco_decode_u_16(arr[3]),
      ayah: dco_decode_u_16(arr[4]),
      wordPosition: dco_decode_u_16(arr[5]),
      minX: dco_decode_u_32(arr[6]),
      maxX: dco_decode_u_32(arr[7]),
      minY: dco_decode_u_32(arr[8]),
      maxY: dco_decode_u_32(arr[9]),
    );
  }

  @protected
  int dco_decode_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Juz dco_decode_juz(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Juz(
      id: dco_decode_u_32(arr[0]),
      juzNumber: dco_decode_u_32(arr[1]),
      verseMapping: dco_decode_Map_String_String_None(arr[2]),
      firstVerseId: dco_decode_u_32(arr[3]),
      lastVerseId: dco_decode_u_32(arr[4]),
      versesCount: dco_decode_u_32(arr[5]),
    );
  }

  @protected
  JuzWithPage dco_decode_juz_with_page(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return JuzWithPage(
      juz: dco_decode_juz(arr[0]),
      pageNumber: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<AyahText> dco_decode_list_ayah_text(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ayah_text).toList();
  }

  @protected
  List<Chapter> dco_decode_list_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_chapter).toList();
  }

  @protected
  List<GlyphPosition> dco_decode_list_glyph_position(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_glyph_position).toList();
  }

  @protected
  List<Juz> dco_decode_list_juz(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_juz).toList();
  }

  @protected
  List<JuzWithPage> dco_decode_list_juz_with_page(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_juz_with_page).toList();
  }

  @protected
  List<Uint32List> dco_decode_list_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_list_prim_u_32_strict)
        .toList();
  }

  @protected
  List<MatchedAyah> dco_decode_list_matched_ayah(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_matched_ayah).toList();
  }

  @protected
  List<int> dco_decode_list_prim_i_16_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Int16List dco_decode_list_prim_i_16_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Int16List;
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<QuizOption> dco_decode_list_quiz_option(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_quiz_option).toList();
  }

  @protected
  List<QuizQuestion> dco_decode_list_quiz_question(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_quiz_question).toList();
  }

  @protected
  List<(String, Uint8List)> dco_decode_list_record_string_list_prim_u_8_strict(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_list_prim_u_8_strict)
        .toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<SearchResult> dco_decode_list_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_search_result).toList();
  }

  @protected
  List<TajweedSegment> dco_decode_list_tajweed_segment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tajweed_segment).toList();
  }

  @protected
  List<Translation> dco_decode_list_translation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_translation).toList();
  }

  @protected
  List<Word> dco_decode_list_word(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_word).toList();
  }

  @protected
  List<WordResult> dco_decode_list_word_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_word_result).toList();
  }

  @protected
  MatchedAyah dco_decode_matched_ayah(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return MatchedAyah(
      matchedAyahKey: dco_decode_String(arr[0]),
      matchedWordsCount: dco_decode_u_32(arr[1]),
      coverage: dco_decode_u_32(arr[2]),
      score: dco_decode_u_32(arr[3]),
      matchWords: dco_decode_list_list_prim_u_32_strict(arr[4]),
    );
  }

  @protected
  MushafPageInfo dco_decode_mushaf_page_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MushafPageInfo(
      surahNameArabic: dco_decode_String(arr[0]),
      juzNumber: dco_decode_u_32(arr[1]),
      pageNumber: dco_decode_u_32(arr[2]),
      nextPageRouteText: dco_decode_String(arr[3]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Chapter? dco_decode_opt_box_autoadd_chapter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_chapter(raw);
  }

  @protected
  Juz? dco_decode_opt_box_autoadd_juz(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_juz(raw);
  }

  @protected
  QuizGenerationError? dco_decode_opt_box_autoadd_quiz_generation_error(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_quiz_generation_error(raw);
  }

  @protected
  QuizQuestion? dco_decode_opt_box_autoadd_quiz_question(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_quiz_question(raw);
  }

  @protected
  Translation? dco_decode_opt_box_autoadd_translation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_translation(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  Verse? dco_decode_opt_box_autoadd_verse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_verse(raw);
  }

  @protected
  VerseDetailWithWords? dco_decode_opt_box_autoadd_verse_detail_with_words(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_verse_detail_with_words(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  List<GlyphPosition>? dco_decode_opt_list_glyph_position(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_glyph_position(raw);
  }

  @protected
  Uint32List? dco_decode_opt_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_32_strict(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  QuizFilter dco_decode_quiz_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return QuizFilter(
      scope: dco_decode_quiz_scope(arr[0]),
      quizCount: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  QuizGenerationError dco_decode_quiz_generation_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return QuizGenerationError_InternalError(dco_decode_String(raw[1]));
      case 1:
        return QuizGenerationError_NoVersesInScope();
      case 2:
        return QuizGenerationError_NoValidQuestionFound();
      case 3:
        return QuizGenerationError_MissingAyahText();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  QuizGenerationResult dco_decode_quiz_generation_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return QuizGenerationResult(
      question: dco_decode_opt_box_autoadd_quiz_question(arr[0]),
      error: dco_decode_opt_box_autoadd_quiz_generation_error(arr[1]),
    );
  }

  @protected
  QuizOption dco_decode_quiz_option(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return QuizOption(
      text: dco_decode_String(arr[0]),
      isCorrect: dco_decode_bool(arr[1]),
    );
  }

  @protected
  QuizQuestion dco_decode_quiz_question(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return QuizQuestion(
      verseKey: dco_decode_String(arr[0]),
      questionTextPart1: dco_decode_String(arr[1]),
      questionTextPart2: dco_decode_String(arr[2]),
      missingPartText: dco_decode_String(arr[3]),
      options: dco_decode_list_quiz_option(arr[4]),
      correctAnswerIndex: dco_decode_u_32(arr[5]),
      correctOrderIndices: dco_decode_opt_list_prim_u_32_strict(arr[6]),
      quizType: dco_decode_String(arr[7]),
      shuffledParts: dco_decode_opt_list_String(arr[8]),
      shuffledKeys: dco_decode_opt_list_String(arr[9]),
      correctOrderKeys: dco_decode_opt_list_String(arr[10]),
    );
  }

  @protected
  QuizQuestions dco_decode_quiz_questions(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return QuizQuestions(questions: dco_decode_list_quiz_question(arr[0]));
  }

  @protected
  QuizScope dco_decode_quiz_scope(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return QuizScope_All();
      case 1:
        return QuizScope_ByJuz(
          juzNumbers: dco_decode_list_prim_u_32_strict(raw[1]),
        );
      case 2:
        return QuizScope_BySurah(surahId: dco_decode_u_32(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  (String, Uint8List) dco_decode_record_string_list_prim_u_8_strict(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_list_prim_u_8_strict(arr[1]));
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  SearchResult dco_decode_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SearchResult(
      verseKey: dco_decode_String(arr[0]),
      score: dco_decode_f_32(arr[1]),
      words: dco_decode_list_word_result(arr[2]),
    );
  }

  @protected
  TajweedSegment dco_decode_tajweed_segment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TajweedSegment(
      rule: dco_decode_String(arr[0]),
      text: dco_decode_String(arr[1]),
    );
  }

  @protected
  TranslatedName dco_decode_translated_name(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TranslatedName(
      languageName: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
    );
  }

  @protected
  Translation dco_decode_translation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Translation(
      text: dco_decode_String(arr[0]),
      footnotes: dco_decode_Map_String_String_None(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Verse dco_decode_verse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return Verse(
      id: dco_decode_u_32(arr[0]),
      verseNumber: dco_decode_u_32(arr[1]),
      verseKey: dco_decode_String(arr[2]),
      hizbNumber: dco_decode_u_32(arr[3]),
      rubElHizbNumber: dco_decode_u_32(arr[4]),
      rukuNumber: dco_decode_u_32(arr[5]),
      manzilNumber: dco_decode_u_32(arr[6]),
      sajdahNumber: dco_decode_opt_box_autoadd_u_32(arr[7]),
      pageNumber: dco_decode_u_32(arr[8]),
      juzNumber: dco_decode_u_32(arr[9]),
      wordIds: dco_decode_list_String(arr[10]),
      translations: dco_decode_list_translation(arr[11]),
    );
  }

  @protected
  VerseDetailWithWords dco_decode_verse_detail_with_words(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return VerseDetailWithWords(
      verse: dco_decode_verse(arr[0]),
      words: dco_decode_list_word(arr[1]),
    );
  }

  @protected
  Word dco_decode_word(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return Word(
      id: dco_decode_u_32(arr[0]),
      wordKey: dco_decode_String(arr[1]),
      position: dco_decode_u_32(arr[2]),
      charTypeName: dco_decode_String(arr[3]),
      textUthmani: dco_decode_String(arr[4]),
      textUthmaniSimple: dco_decode_String(arr[5]),
      textTajweed: dco_decode_list_tajweed_segment(arr[6]),
      pageNumber: dco_decode_u_32(arr[7]),
      lineNumber: dco_decode_u_32(arr[8]),
      chapterId: dco_decode_u_32(arr[9]),
      verseId: dco_decode_u_32(arr[10]),
    );
  }

  @protected
  WordResult dco_decode_word_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return WordResult(
      id: dco_decode_u_32(arr[0]),
      position: dco_decode_u_32(arr[1]),
      textUthmani: dco_decode_String(arr[2]),
      highlighted: dco_decode_bool(arr[3]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  SharedBuffer
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSharedBuffer(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SharedBufferImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, Uint8List> sse_decode_Map_String_list_prim_u_8_strict_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_list_prim_u_8_strict(
      deserializer,
    );
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  SharedBuffer
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSharedBuffer(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SharedBufferImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AyahText sse_decode_ayah_text(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_verseKey = sse_decode_String(deserializer);
    var var_textUthmaniSimple = sse_decode_String(deserializer);
    var var_textUthmani = sse_decode_String(deserializer);
    var var_textQpcHafs = sse_decode_String(deserializer);
    return AyahText(
      verseKey: var_verseKey,
      textUthmaniSimple: var_textUthmaniSimple,
      textUthmani: var_textUthmani,
      textQpcHafs: var_textQpcHafs,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Chapter sse_decode_box_autoadd_chapter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_chapter(deserializer));
  }

  @protected
  Juz sse_decode_box_autoadd_juz(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_juz(deserializer));
  }

  @protected
  QuizFilter sse_decode_box_autoadd_quiz_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_quiz_filter(deserializer));
  }

  @protected
  QuizGenerationError sse_decode_box_autoadd_quiz_generation_error(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_quiz_generation_error(deserializer));
  }

  @protected
  QuizQuestion sse_decode_box_autoadd_quiz_question(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_quiz_question(deserializer));
  }

  @protected
  Translation sse_decode_box_autoadd_translation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_translation(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  Verse sse_decode_box_autoadd_verse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_verse(deserializer));
  }

  @protected
  VerseDetailWithWords sse_decode_box_autoadd_verse_detail_with_words(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_verse_detail_with_words(deserializer));
  }

  @protected
  Chapter sse_decode_chapter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_revelationPlace = sse_decode_String(deserializer);
    var var_revelationOrder = sse_decode_u_32(deserializer);
    var var_bismillahPre = sse_decode_bool(deserializer);
    var var_nameSimple = sse_decode_String(deserializer);
    var var_nameComplex = sse_decode_String(deserializer);
    var var_nameArabic = sse_decode_String(deserializer);
    var var_versesCount = sse_decode_u_32(deserializer);
    var var_pages = sse_decode_list_prim_u_32_strict(deserializer);
    var var_translatedName = sse_decode_translated_name(deserializer);
    return Chapter(
      id: var_id,
      revelationPlace: var_revelationPlace,
      revelationOrder: var_revelationOrder,
      bismillahPre: var_bismillahPre,
      nameSimple: var_nameSimple,
      nameComplex: var_nameComplex,
      nameArabic: var_nameArabic,
      versesCount: var_versesCount,
      pages: var_pages,
      translatedName: var_translatedName,
    );
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  GlyphPosition sse_decode_glyph_position(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_glyphId = sse_decode_u_32(deserializer);
    var var_pageNumber = sse_decode_u_16(deserializer);
    var var_lineNumber = sse_decode_u_8(deserializer);
    var var_sura = sse_decode_u_16(deserializer);
    var var_ayah = sse_decode_u_16(deserializer);
    var var_wordPosition = sse_decode_u_16(deserializer);
    var var_minX = sse_decode_u_32(deserializer);
    var var_maxX = sse_decode_u_32(deserializer);
    var var_minY = sse_decode_u_32(deserializer);
    var var_maxY = sse_decode_u_32(deserializer);
    return GlyphPosition(
      glyphId: var_glyphId,
      pageNumber: var_pageNumber,
      lineNumber: var_lineNumber,
      sura: var_sura,
      ayah: var_ayah,
      wordPosition: var_wordPosition,
      minX: var_minX,
      maxX: var_maxX,
      minY: var_minY,
      maxY: var_maxY,
    );
  }

  @protected
  int sse_decode_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt16();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Juz sse_decode_juz(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_juzNumber = sse_decode_u_32(deserializer);
    var var_verseMapping = sse_decode_Map_String_String_None(deserializer);
    var var_firstVerseId = sse_decode_u_32(deserializer);
    var var_lastVerseId = sse_decode_u_32(deserializer);
    var var_versesCount = sse_decode_u_32(deserializer);
    return Juz(
      id: var_id,
      juzNumber: var_juzNumber,
      verseMapping: var_verseMapping,
      firstVerseId: var_firstVerseId,
      lastVerseId: var_lastVerseId,
      versesCount: var_versesCount,
    );
  }

  @protected
  JuzWithPage sse_decode_juz_with_page(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_juz = sse_decode_juz(deserializer);
    var var_pageNumber = sse_decode_u_32(deserializer);
    return JuzWithPage(juz: var_juz, pageNumber: var_pageNumber);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AyahText> sse_decode_list_ayah_text(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AyahText>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ayah_text(deserializer));
    }
    return ans_;
  }

  @protected
  List<Chapter> sse_decode_list_chapter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Chapter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_chapter(deserializer));
    }
    return ans_;
  }

  @protected
  List<GlyphPosition> sse_decode_list_glyph_position(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <GlyphPosition>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_glyph_position(deserializer));
    }
    return ans_;
  }

  @protected
  List<Juz> sse_decode_list_juz(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Juz>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_juz(deserializer));
    }
    return ans_;
  }

  @protected
  List<JuzWithPage> sse_decode_list_juz_with_page(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <JuzWithPage>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_juz_with_page(deserializer));
    }
    return ans_;
  }

  @protected
  List<Uint32List> sse_decode_list_list_prim_u_32_strict(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Uint32List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_u_32_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<MatchedAyah> sse_decode_list_matched_ayah(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MatchedAyah>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_matched_ayah(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_i_16_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt16List(len_);
  }

  @protected
  Int16List sse_decode_list_prim_i_16_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt16List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<QuizOption> sse_decode_list_quiz_option(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <QuizOption>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_quiz_option(deserializer));
    }
    return ans_;
  }

  @protected
  List<QuizQuestion> sse_decode_list_quiz_question(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <QuizQuestion>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_quiz_question(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, Uint8List)> sse_decode_list_record_string_list_prim_u_8_strict(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, Uint8List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<SearchResult> sse_decode_list_search_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SearchResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_search_result(deserializer));
    }
    return ans_;
  }

  @protected
  List<TajweedSegment> sse_decode_list_tajweed_segment(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TajweedSegment>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tajweed_segment(deserializer));
    }
    return ans_;
  }

  @protected
  List<Translation> sse_decode_list_translation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Translation>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_translation(deserializer));
    }
    return ans_;
  }

  @protected
  List<Word> sse_decode_list_word(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Word>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_word(deserializer));
    }
    return ans_;
  }

  @protected
  List<WordResult> sse_decode_list_word_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WordResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_word_result(deserializer));
    }
    return ans_;
  }

  @protected
  MatchedAyah sse_decode_matched_ayah(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_matchedAyahKey = sse_decode_String(deserializer);
    var var_matchedWordsCount = sse_decode_u_32(deserializer);
    var var_coverage = sse_decode_u_32(deserializer);
    var var_score = sse_decode_u_32(deserializer);
    var var_matchWords = sse_decode_list_list_prim_u_32_strict(deserializer);
    return MatchedAyah(
      matchedAyahKey: var_matchedAyahKey,
      matchedWordsCount: var_matchedWordsCount,
      coverage: var_coverage,
      score: var_score,
      matchWords: var_matchWords,
    );
  }

  @protected
  MushafPageInfo sse_decode_mushaf_page_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_surahNameArabic = sse_decode_String(deserializer);
    var var_juzNumber = sse_decode_u_32(deserializer);
    var var_pageNumber = sse_decode_u_32(deserializer);
    var var_nextPageRouteText = sse_decode_String(deserializer);
    return MushafPageInfo(
      surahNameArabic: var_surahNameArabic,
      juzNumber: var_juzNumber,
      pageNumber: var_pageNumber,
      nextPageRouteText: var_nextPageRouteText,
    );
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Chapter? sse_decode_opt_box_autoadd_chapter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_chapter(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Juz? sse_decode_opt_box_autoadd_juz(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_juz(deserializer));
    } else {
      return null;
    }
  }

  @protected
  QuizGenerationError? sse_decode_opt_box_autoadd_quiz_generation_error(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_quiz_generation_error(deserializer));
    } else {
      return null;
    }
  }

  @protected
  QuizQuestion? sse_decode_opt_box_autoadd_quiz_question(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_quiz_question(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Translation? sse_decode_opt_box_autoadd_translation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_translation(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Verse? sse_decode_opt_box_autoadd_verse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_verse(deserializer));
    } else {
      return null;
    }
  }

  @protected
  VerseDetailWithWords? sse_decode_opt_box_autoadd_verse_detail_with_words(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_verse_detail_with_words(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<GlyphPosition>? sse_decode_opt_list_glyph_position(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_glyph_position(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint32List? sse_decode_opt_list_prim_u_32_strict(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_32_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  QuizFilter sse_decode_quiz_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_scope = sse_decode_quiz_scope(deserializer);
    var var_quizCount = sse_decode_u_32(deserializer);
    return QuizFilter(scope: var_scope, quizCount: var_quizCount);
  }

  @protected
  QuizGenerationError sse_decode_quiz_generation_error(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return QuizGenerationError_InternalError(var_field0);
      case 1:
        return QuizGenerationError_NoVersesInScope();
      case 2:
        return QuizGenerationError_NoValidQuestionFound();
      case 3:
        return QuizGenerationError_MissingAyahText();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  QuizGenerationResult sse_decode_quiz_generation_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_question = sse_decode_opt_box_autoadd_quiz_question(deserializer);
    var var_error = sse_decode_opt_box_autoadd_quiz_generation_error(
      deserializer,
    );
    return QuizGenerationResult(question: var_question, error: var_error);
  }

  @protected
  QuizOption sse_decode_quiz_option(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_text = sse_decode_String(deserializer);
    var var_isCorrect = sse_decode_bool(deserializer);
    return QuizOption(text: var_text, isCorrect: var_isCorrect);
  }

  @protected
  QuizQuestion sse_decode_quiz_question(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_verseKey = sse_decode_String(deserializer);
    var var_questionTextPart1 = sse_decode_String(deserializer);
    var var_questionTextPart2 = sse_decode_String(deserializer);
    var var_missingPartText = sse_decode_String(deserializer);
    var var_options = sse_decode_list_quiz_option(deserializer);
    var var_correctAnswerIndex = sse_decode_u_32(deserializer);
    var var_correctOrderIndices = sse_decode_opt_list_prim_u_32_strict(
      deserializer,
    );
    var var_quizType = sse_decode_String(deserializer);
    var var_shuffledParts = sse_decode_opt_list_String(deserializer);
    var var_shuffledKeys = sse_decode_opt_list_String(deserializer);
    var var_correctOrderKeys = sse_decode_opt_list_String(deserializer);
    return QuizQuestion(
      verseKey: var_verseKey,
      questionTextPart1: var_questionTextPart1,
      questionTextPart2: var_questionTextPart2,
      missingPartText: var_missingPartText,
      options: var_options,
      correctAnswerIndex: var_correctAnswerIndex,
      correctOrderIndices: var_correctOrderIndices,
      quizType: var_quizType,
      shuffledParts: var_shuffledParts,
      shuffledKeys: var_shuffledKeys,
      correctOrderKeys: var_correctOrderKeys,
    );
  }

  @protected
  QuizQuestions sse_decode_quiz_questions(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_questions = sse_decode_list_quiz_question(deserializer);
    return QuizQuestions(questions: var_questions);
  }

  @protected
  QuizScope sse_decode_quiz_scope(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return QuizScope_All();
      case 1:
        var var_juzNumbers = sse_decode_list_prim_u_32_strict(deserializer);
        return QuizScope_ByJuz(juzNumbers: var_juzNumbers);
      case 2:
        var var_surahId = sse_decode_u_32(deserializer);
        return QuizScope_BySurah(surahId: var_surahId);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  (String, Uint8List) sse_decode_record_string_list_prim_u_8_strict(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SearchResult sse_decode_search_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_verseKey = sse_decode_String(deserializer);
    var var_score = sse_decode_f_32(deserializer);
    var var_words = sse_decode_list_word_result(deserializer);
    return SearchResult(
      verseKey: var_verseKey,
      score: var_score,
      words: var_words,
    );
  }

  @protected
  TajweedSegment sse_decode_tajweed_segment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rule = sse_decode_String(deserializer);
    var var_text = sse_decode_String(deserializer);
    return TajweedSegment(rule: var_rule, text: var_text);
  }

  @protected
  TranslatedName sse_decode_translated_name(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_languageName = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    return TranslatedName(languageName: var_languageName, name: var_name);
  }

  @protected
  Translation sse_decode_translation(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_text = sse_decode_String(deserializer);
    var var_footnotes = sse_decode_Map_String_String_None(deserializer);
    return Translation(text: var_text, footnotes: var_footnotes);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  Verse sse_decode_verse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_verseNumber = sse_decode_u_32(deserializer);
    var var_verseKey = sse_decode_String(deserializer);
    var var_hizbNumber = sse_decode_u_32(deserializer);
    var var_rubElHizbNumber = sse_decode_u_32(deserializer);
    var var_rukuNumber = sse_decode_u_32(deserializer);
    var var_manzilNumber = sse_decode_u_32(deserializer);
    var var_sajdahNumber = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_pageNumber = sse_decode_u_32(deserializer);
    var var_juzNumber = sse_decode_u_32(deserializer);
    var var_wordIds = sse_decode_list_String(deserializer);
    var var_translations = sse_decode_list_translation(deserializer);
    return Verse(
      id: var_id,
      verseNumber: var_verseNumber,
      verseKey: var_verseKey,
      hizbNumber: var_hizbNumber,
      rubElHizbNumber: var_rubElHizbNumber,
      rukuNumber: var_rukuNumber,
      manzilNumber: var_manzilNumber,
      sajdahNumber: var_sajdahNumber,
      pageNumber: var_pageNumber,
      juzNumber: var_juzNumber,
      wordIds: var_wordIds,
      translations: var_translations,
    );
  }

  @protected
  VerseDetailWithWords sse_decode_verse_detail_with_words(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_verse = sse_decode_verse(deserializer);
    var var_words = sse_decode_list_word(deserializer);
    return VerseDetailWithWords(verse: var_verse, words: var_words);
  }

  @protected
  Word sse_decode_word(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_wordKey = sse_decode_String(deserializer);
    var var_position = sse_decode_u_32(deserializer);
    var var_charTypeName = sse_decode_String(deserializer);
    var var_textUthmani = sse_decode_String(deserializer);
    var var_textUthmaniSimple = sse_decode_String(deserializer);
    var var_textTajweed = sse_decode_list_tajweed_segment(deserializer);
    var var_pageNumber = sse_decode_u_32(deserializer);
    var var_lineNumber = sse_decode_u_32(deserializer);
    var var_chapterId = sse_decode_u_32(deserializer);
    var var_verseId = sse_decode_u_32(deserializer);
    return Word(
      id: var_id,
      wordKey: var_wordKey,
      position: var_position,
      charTypeName: var_charTypeName,
      textUthmani: var_textUthmani,
      textUthmaniSimple: var_textUthmaniSimple,
      textTajweed: var_textTajweed,
      pageNumber: var_pageNumber,
      lineNumber: var_lineNumber,
      chapterId: var_chapterId,
      verseId: var_verseId,
    );
  }

  @protected
  WordResult sse_decode_word_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_position = sse_decode_u_32(deserializer);
    var var_textUthmani = sse_decode_String(deserializer);
    var var_highlighted = sse_decode_bool(deserializer);
    return WordResult(
      id: var_id,
      position: var_position,
      textUthmani: var_textUthmani,
      highlighted: var_highlighted,
    );
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSharedBuffer(
    SharedBuffer self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SharedBufferImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void sse_encode_Map_String_list_prim_u_8_strict_None(
    Map<String, Uint8List> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_list_prim_u_8_strict(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSharedBuffer(
    SharedBuffer self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SharedBufferImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_ayah_text(AyahText self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.verseKey, serializer);
    sse_encode_String(self.textUthmaniSimple, serializer);
    sse_encode_String(self.textUthmani, serializer);
    sse_encode_String(self.textQpcHafs, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_chapter(Chapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_chapter(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_juz(Juz self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_juz(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_quiz_filter(
    QuizFilter self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_quiz_filter(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_quiz_generation_error(
    QuizGenerationError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_quiz_generation_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_quiz_question(
    QuizQuestion self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_quiz_question(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_translation(
    Translation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_translation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_verse(Verse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_verse(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_verse_detail_with_words(
    VerseDetailWithWords self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_verse_detail_with_words(self, serializer);
  }

  @protected
  void sse_encode_chapter(Chapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.revelationPlace, serializer);
    sse_encode_u_32(self.revelationOrder, serializer);
    sse_encode_bool(self.bismillahPre, serializer);
    sse_encode_String(self.nameSimple, serializer);
    sse_encode_String(self.nameComplex, serializer);
    sse_encode_String(self.nameArabic, serializer);
    sse_encode_u_32(self.versesCount, serializer);
    sse_encode_list_prim_u_32_strict(self.pages, serializer);
    sse_encode_translated_name(self.translatedName, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_glyph_position(GlyphPosition self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.glyphId, serializer);
    sse_encode_u_16(self.pageNumber, serializer);
    sse_encode_u_8(self.lineNumber, serializer);
    sse_encode_u_16(self.sura, serializer);
    sse_encode_u_16(self.ayah, serializer);
    sse_encode_u_16(self.wordPosition, serializer);
    sse_encode_u_32(self.minX, serializer);
    sse_encode_u_32(self.maxX, serializer);
    sse_encode_u_32(self.minY, serializer);
    sse_encode_u_32(self.maxY, serializer);
  }

  @protected
  void sse_encode_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt16(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_juz(Juz self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_32(self.juzNumber, serializer);
    sse_encode_Map_String_String_None(self.verseMapping, serializer);
    sse_encode_u_32(self.firstVerseId, serializer);
    sse_encode_u_32(self.lastVerseId, serializer);
    sse_encode_u_32(self.versesCount, serializer);
  }

  @protected
  void sse_encode_juz_with_page(JuzWithPage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_juz(self.juz, serializer);
    sse_encode_u_32(self.pageNumber, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_ayah_text(
    List<AyahText> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ayah_text(item, serializer);
    }
  }

  @protected
  void sse_encode_list_chapter(List<Chapter> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_chapter(item, serializer);
    }
  }

  @protected
  void sse_encode_list_glyph_position(
    List<GlyphPosition> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_glyph_position(item, serializer);
    }
  }

  @protected
  void sse_encode_list_juz(List<Juz> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_juz(item, serializer);
    }
  }

  @protected
  void sse_encode_list_juz_with_page(
    List<JuzWithPage> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_juz_with_page(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_prim_u_32_strict(
    List<Uint32List> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_u_32_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_matched_ayah(
    List<MatchedAyah> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_matched_ayah(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_i_16_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt16List(
      self is Int16List ? self : Int16List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_i_16_strict(
    Int16List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt16List(self);
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
    Uint32List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_quiz_option(
    List<QuizOption> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_quiz_option(item, serializer);
    }
  }

  @protected
  void sse_encode_list_quiz_question(
    List<QuizQuestion> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_quiz_question(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_list_prim_u_8_strict(
    List<(String, Uint8List)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_search_result(
    List<SearchResult> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_search_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tajweed_segment(
    List<TajweedSegment> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tajweed_segment(item, serializer);
    }
  }

  @protected
  void sse_encode_list_translation(
    List<Translation> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_translation(item, serializer);
    }
  }

  @protected
  void sse_encode_list_word(List<Word> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_word(item, serializer);
    }
  }

  @protected
  void sse_encode_list_word_result(
    List<WordResult> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_word_result(item, serializer);
    }
  }

  @protected
  void sse_encode_matched_ayah(MatchedAyah self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.matchedAyahKey, serializer);
    sse_encode_u_32(self.matchedWordsCount, serializer);
    sse_encode_u_32(self.coverage, serializer);
    sse_encode_u_32(self.score, serializer);
    sse_encode_list_list_prim_u_32_strict(self.matchWords, serializer);
  }

  @protected
  void sse_encode_mushaf_page_info(
    MushafPageInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.surahNameArabic, serializer);
    sse_encode_u_32(self.juzNumber, serializer);
    sse_encode_u_32(self.pageNumber, serializer);
    sse_encode_String(self.nextPageRouteText, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_chapter(
    Chapter? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_chapter(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_juz(Juz? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_juz(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_quiz_generation_error(
    QuizGenerationError? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_quiz_generation_error(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_quiz_question(
    QuizQuestion? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_quiz_question(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_translation(
    Translation? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_translation(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_verse(Verse? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_verse(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_verse_detail_with_words(
    VerseDetailWithWords? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_verse_detail_with_words(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
    List<String>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_glyph_position(
    List<GlyphPosition>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_glyph_position(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_32_strict(
    Uint32List? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_32_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
    Uint8List? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_quiz_filter(QuizFilter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_quiz_scope(self.scope, serializer);
    sse_encode_u_32(self.quizCount, serializer);
  }

  @protected
  void sse_encode_quiz_generation_error(
    QuizGenerationError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case QuizGenerationError_InternalError(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case QuizGenerationError_NoVersesInScope():
        sse_encode_i_32(1, serializer);
      case QuizGenerationError_NoValidQuestionFound():
        sse_encode_i_32(2, serializer);
      case QuizGenerationError_MissingAyahText():
        sse_encode_i_32(3, serializer);
    }
  }

  @protected
  void sse_encode_quiz_generation_result(
    QuizGenerationResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_quiz_question(self.question, serializer);
    sse_encode_opt_box_autoadd_quiz_generation_error(self.error, serializer);
  }

  @protected
  void sse_encode_quiz_option(QuizOption self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.text, serializer);
    sse_encode_bool(self.isCorrect, serializer);
  }

  @protected
  void sse_encode_quiz_question(QuizQuestion self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.verseKey, serializer);
    sse_encode_String(self.questionTextPart1, serializer);
    sse_encode_String(self.questionTextPart2, serializer);
    sse_encode_String(self.missingPartText, serializer);
    sse_encode_list_quiz_option(self.options, serializer);
    sse_encode_u_32(self.correctAnswerIndex, serializer);
    sse_encode_opt_list_prim_u_32_strict(self.correctOrderIndices, serializer);
    sse_encode_String(self.quizType, serializer);
    sse_encode_opt_list_String(self.shuffledParts, serializer);
    sse_encode_opt_list_String(self.shuffledKeys, serializer);
    sse_encode_opt_list_String(self.correctOrderKeys, serializer);
  }

  @protected
  void sse_encode_quiz_questions(QuizQuestions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_quiz_question(self.questions, serializer);
  }

  @protected
  void sse_encode_quiz_scope(QuizScope self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case QuizScope_All():
        sse_encode_i_32(0, serializer);
      case QuizScope_ByJuz(juzNumbers: final juzNumbers):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_32_strict(juzNumbers, serializer);
      case QuizScope_BySurah(surahId: final surahId):
        sse_encode_i_32(2, serializer);
        sse_encode_u_32(surahId, serializer);
    }
  }

  @protected
  void sse_encode_record_string_list_prim_u_8_strict(
    (String, Uint8List) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_search_result(SearchResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.verseKey, serializer);
    sse_encode_f_32(self.score, serializer);
    sse_encode_list_word_result(self.words, serializer);
  }

  @protected
  void sse_encode_tajweed_segment(
    TajweedSegment self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.rule, serializer);
    sse_encode_String(self.text, serializer);
  }

  @protected
  void sse_encode_translated_name(
    TranslatedName self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.languageName, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_translation(Translation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.text, serializer);
    sse_encode_Map_String_String_None(self.footnotes, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_verse(Verse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_32(self.verseNumber, serializer);
    sse_encode_String(self.verseKey, serializer);
    sse_encode_u_32(self.hizbNumber, serializer);
    sse_encode_u_32(self.rubElHizbNumber, serializer);
    sse_encode_u_32(self.rukuNumber, serializer);
    sse_encode_u_32(self.manzilNumber, serializer);
    sse_encode_opt_box_autoadd_u_32(self.sajdahNumber, serializer);
    sse_encode_u_32(self.pageNumber, serializer);
    sse_encode_u_32(self.juzNumber, serializer);
    sse_encode_list_String(self.wordIds, serializer);
    sse_encode_list_translation(self.translations, serializer);
  }

  @protected
  void sse_encode_verse_detail_with_words(
    VerseDetailWithWords self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_verse(self.verse, serializer);
    sse_encode_list_word(self.words, serializer);
  }

  @protected
  void sse_encode_word(Word self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.wordKey, serializer);
    sse_encode_u_32(self.position, serializer);
    sse_encode_String(self.charTypeName, serializer);
    sse_encode_String(self.textUthmani, serializer);
    sse_encode_String(self.textUthmaniSimple, serializer);
    sse_encode_list_tajweed_segment(self.textTajweed, serializer);
    sse_encode_u_32(self.pageNumber, serializer);
    sse_encode_u_32(self.lineNumber, serializer);
    sse_encode_u_32(self.chapterId, serializer);
    sse_encode_u_32(self.verseId, serializer);
  }

  @protected
  void sse_encode_word_result(WordResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_u_32(self.position, serializer);
    sse_encode_String(self.textUthmani, serializer);
    sse_encode_bool(self.highlighted, serializer);
  }
}

@sealed
class SharedBufferImpl extends RustOpaque implements SharedBuffer {
  // Not to be used by end users
  SharedBufferImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SharedBufferImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SharedBuffer,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SharedBuffer,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SharedBufferPtr,
  );
}
